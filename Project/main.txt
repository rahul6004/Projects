CI/CD using Jenkins,github,docker ,ECS and ECR on AWS platform

once Developer commit the code on Github Jenkins will start the build and create Docker image and push it AWS ECR and deployed to ECS.

- GitHub  
- Jenkins,Docker —EC2 Jenkins &Docker —CloudFormation — AWS CLI
- ECS —  CloudFormation — AWS CLI
- ECR —  AWS CLI

- Connect your AWS Account to your Git Bash 

Step 1: Build an ECS Cluster :-
- clone the git repo in your local machine (this git repo)
# git clone https://github.com/jicowan/hello-world
  - change instance type and AMI ID you can update this ID (ecs-cluster.template, ecs-jenkins-demo.template)
    
  - change line no 105 replace policy name 
    AmazonEC2ContainerServiceFullAccess => AmazonEC2ContainerRegistryPowerUser
  
  - update the commands in line no 450 -453 (refer from jenkins.io)

- Change the working directory to the directory that was created when you cloned the repository. At the command prompt, type or paste the following.
   Where "<key_name>" is the name of an SSH key in the region where you're creating the ECS cluster.
# aws cloudformation create-stack --template-body file://ecs-cluster.template --stack-name EcsClusterStack --capabilities CAPABILITY_IAM --tags Key=Name,Value=ECS --region us-west-2 --parameters ParameterKey=KeyName,
  ParameterValue=<key_name> ParameterKey=EcsCluster,ParameterValue=getting-started ParameterKey=AsgMaxSize,ParameterValue=2

- Note: Do not proceed to the next step until the Stack Status shows CREATE_COMPLETE. To get the status of the stack at a command prompt,
    type " aws cloudformation describe-stacks --stack-name EcsClusterStack --query 'Stacks[*].[StackId,StackStatus]' "

- then check the your account then search cloudFormation it will Creating 

Step 2: Create a Jenkins Server :-
- Change the current working directory to the root of the cloned repository, and then execute the following command
# aws cloudformation create-stack --template-body file://ecs-jenkins-demo.template --stack-name JenkinsStack --capabilities CAPABILITY_IAM --tags Key=Name,Value=Jenkins --region us-west-2 --parameters ParameterKey=EcsStackName,ParameterValue=EcsClusterStack

- check the status of jenkins complete or not
# aws cloudformation describe-stacks --stack-name JenkinsStack --query 'Stacks[*].[StackId, StackStatus]'

- after Jenkins instance is running 
- then connect the instance to the GitBash or PowerShell and check the jenkins install or not (rpm -q jenkins)
- if jenkins is not install then install it (form jenkins.io)

- start the jenkins service
# systemctl start jenkisn

- install git 
# yum install git 

- install docker 
# yum install docker 

- and start docker service 
# ststemctl start docker

- goto jenkins instance goto Security group allow the port number 8080 and save it
- then copy the IP address of Jenkins instance and open new tab past ip-address + :8080

- then enter the password
- run this command on linux terminal then copy the password and past it on jenkins
# cat /var/lib/jenkins/secrets/initialAdminPassword

- then enter all the details like name, pass, email etc.,

Step 3: Create an ECR Registry:-

- Create a ECR registry by running the following command
# aws ecr create-repository --repository-name hello-world --region us-west-2
- and check your ECR hello-world is created 

Step 4: Configure Jenkins First Run :-

- goto Manage Jenkins -> Plugins -> Available plugins and install 
  1. Amazon ECR
  2. CloudBees Docker Build and Publish

- create freestyle job
in configuration
  — github url : https://github.com/jicowan/hello-world.git
build: 
   excute-shell : 
#!/bin/bash
- copy that and paste  your docker ecr repo push command first step like below
- goto Amazon ECR -> Repositories click on View push commands then you see this command
aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 368938722695.dkr.ecr.us-west-2.amazonaws.com
${DOCKER_LOGIN}

- remove ${DOCKER_LOGIN}
- goto ecr repository select push commands copy the command from console
  example: aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin <id>.dkr.ecr.us-west-2.amazonaws.com

manually execute this cmd on Jenkins servers

   Docker build and publish:
   ecr repo name: hello-world
   tag:  v_$BUILD_NUMBER
   ecr url:   https://416227743233.dkr.ecr.us-west-2.amazonaws.com

- in excute shell past below data and change the "REPOSITORY_NAME=<your_repo_name> (hello-world) " and "CLUSTER=<your_cluster_name> (getting-started)"

#!/bin/bash
#Constants
REGION=us-west-2
REPOSITORY_NAME=<ECR_repo>
CLUSTER=<cluster_name>
FAMILY=`sed -n 's/.*"family": "\(.*\)",/\1/p' taskdef.json`
NAME=`sed -n 's/.*"name": "\(.*\)",/\1/p' taskdef.json`
SERVICE_NAME=${NAME}-service
#Store the repositoryUri as a variable
REPOSITORY_URI=`aws ecr describe-repositories --repository-names ${REPOSITORY_NAME} --region ${REGION} | jq .repositories[].repositoryUri | tr -d '"'`
#Replace the build number and respository URI placeholders with the constants above
sed -e "s;%BUILD_NUMBER%;${BUILD_NUMBER};g" -e "s;%REPOSITORY_URI%;${REPOSITORY_URI};g" taskdef.json > ${NAME}-v_${BUILD_NUMBER}.json
#Register the task definition in the repository
aws ecs register-task-definition --family ${FAMILY} --cli-input-json file://${WORKSPACE}/${NAME}-v_${BUILD_NUMBER}.json --region ${REGION}
SERVICES=`aws ecs describe-services --services ${SERVICE_NAME} --cluster ${CLUSTER} --region ${REGION} | jq .failures[]`
#Get latest revision
REVISION=`aws ecs describe-task-definition --task-definition ${NAME} --region ${REGION} | jq .taskDefinition.revision`

#Create or update service
if [ "$SERVICES" == "" ]; then
  echo "entered existing service"
  DESIRED_COUNT=`aws ecs describe-services --services ${SERVICE_NAME} --cluster ${CLUSTER} --region ${REGION} | jq .services[].desiredCount`
  if [ ${DESIRED_COUNT} = "0" ]; then
    DESIRED_COUNT="1"
  fi
  aws ecs update-service --cluster ${CLUSTER} --region ${REGION} --service ${SERVICE_NAME} --task-definition ${FAMILY}:${REVISION} --desired-count ${DESIRED_COUNT}
else
  echo "entered new service"
  aws ecs create-service --service-name ${SERVICE_NAME} --desired-count 1 --task-definition ${FAMILY} --cluster ${CLUSTER} --region ${REGION}
fi

- then you got this error
  you will see error
  Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post "http://%2Fvar%2Frun%2Fdocker.sock/v1.24/auth": dial unix /var/run/docker.sock: connect: permission denied
  Build step 'Execute shell' marked build as failure
  Finished: FAILURE

- then you go to jenkins server run below cmd
# chmod 777 /var/run/docker.sock

- re-run the job
========================================================================================
